apiVersion: v1
kind: ServiceAccount
metadata:
  name: emojify-auth 
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: emojify-auth-configmap
data:
  auto-auth: |
    "auto_auth" {
      method "kubernetes" {
        config {
          role = "demo"
        }
      }
    
      sink "file" {
        config {
          path = "/var/run/secrets/vault-token/token.txt"
        }
      }
    }
 
  consultemplate-config: |
    template {
      source = "/etc/config/secrets.tmpl"
      destination = "/var/run/secrets/vault/.env"

      left_delimiter  = "(("
      right_delimiter = "))"
    }

    vault {
      # This is the address of the Vault leader. The protocol (http(s)) portion
      # of the address is required.
      address = "http://vault.service.consul:8200"
    }

  consultemplate-template: |
    DATABASE_URL=postgres://(( with secret "database/creds/db-role" ))(( .Data.username ))@emojify-db:(( .Data.password ))(( end ))@(( with secret "secret/data/emojify-auth" ))(( .Data.data.db_server ))(( end )):5432/keratin
    
    (( with secret "secret/data/emojify-auth" ))
    REDIS_KEY=(( .Data.data.redis_key ))(( end ))

  keratin-startup: |
    #!/bin/sh -e
    if [[ ! -f /var/run/secrets/vault/.env ]] ; then
      echo 'Secrets do not exist at expected path, exiting...'
      exit 1
    fi
    # Load the vault secrets as environment variables
    export $(cat /var/run/secrets/vault/.env | xargs) 
    # Setup the database
    /app/authn migrate 
    # Start the server
    /app/authn server
---

apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: emojify-auth
  labels:
    app: emojify-auth
spec:
  replicas: 1
  selector:
    matchLabels:
      app: emojify-auth
  template:
    metadata:
      labels:
        app: emojify-auth
    spec:
      serviceAccountName: emojify-auth
      automountServiceAccountToken: true
      volumes:
      - name: config
        configMap:
          name: emojify-auth-configmap
          items:
          - key: auto-auth
            path: auto-auth.hcl
          - key: consultemplate-config
            path: consultemplate.hcl
          - key: consultemplate-template
            path: secrets.tmpl
      - name: keratin-startup
        configMap:
          name: emojify-auth-configmap
          items:
          - key: keratin-startup
            path: startup.sh
      - name: secrets
        emptyDir: {}
      - name: vault-token
        emptyDir: {}

      containers:
      - name: keratin
        image: "keratin/authn-server:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        command: ["/bin/sh"]
        args: ["/scripts/startup.sh"]
        volumeMounts:
        - name: secrets
          mountPath: /var/run/secrets/vault
          readOnly: true
        - name: keratin-startup
          mountPath: /scripts
          readOnly: false
        env:
        - name: AUTHN_URL
          value: "localhost:8080"
        - name: APP_DOMAINS
          value: "localhost"
        - name: REDIS_URL
          value: "{{ .Values.redis_connection }}"
        - name: SECRET_KEY_BASE
          value: "my-authn-test-secret"
        - name: HTTP_AUTH_USERNAME
          value: "hello"
        - name: HTTP_AUTH_PASSWORD
          value: "password"

      - name: vault-auth
        image: "vault:{{ .Values.vault_version }}"
        imagePullPolicy: IfNotPresent
        command: ["vault"]
        args: ["agent","-address","http://vault.service.consul:8200","-config","/etc/config/auto-auth.hcl"]
        volumeMounts:
        - name: config
          mountPath: /etc/config
          readOnly: true
        - name: vault-token
          mountPath: /var/run/secrets/vault-token

      - name: consul-template
        image: "hashicorp/consul-template:alpine"
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: ["-c", "VAULT_TOKEN=$(cat /var/run/secrets/vault-token/token.txt) /bin/consul-template -config /etc/config/consultemplate.hcl"]
        volumeMounts:
        - name: secrets
          mountPath: /var/run/secrets/vault
          readOnly: false
        - name: vault-token
          mountPath: /var/run/secrets/vault-token
          readOnly: true
        - name: config
          mountPath: /etc/config
          readOnly: true

